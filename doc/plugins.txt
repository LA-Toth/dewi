HOW TO USE PLUGINS
==================

1. What is a plugin?
-------------------

A plugin is an extension to DWA, which has a descriptor file containing
information how to integrate into DWA. It is represented as a directory
and its contents.

The content next to the configuration file is one or more commands which
are treated as they would be in the core DWA code. Next to these commands
further modules may be, for the purpose to split what the command does
and how it does. As a trivial example, the command prints the current
formatted local time, but another module has the function to format it.

Next to the commands additional extensions may be, such as another build
system, which functionality is basically the same as the autotools
'./configure && make && make install' command, with helper functions
for releasing a product (module, code).


2. Recommended plugin directory layout
--------------------------------------

It's really just recommended because for the more flexibility almost
nothing is restricted.

A typical plugin directory have to subdirectories, etc/ and lib/. The first
directory contains the configuration file and the second contains the whole
python source code. This directory will be added to the python's path.
Everything else is not in the scope of this text.

The etc/ directory is mandatory, the source directory is configurable.
The configuration file must be named as plugin.yml.

Thus, the layout is:
<root-directory-of-plugin>/
  |- etc/
  |   |- plugin.yml
  |   \- <optionally other files and directories>
  |
  |- <python source directory>/
  \- <optionally other files and directories>


3. The configuration file and command module types
--------------------------------------------------

The location is: <root-directory-of-plugin>/etc/plugin.yml
The format is YaML, see http://yaml.org/ for details.

3.1. An example configuration file

There is an example file, which will be discussed later.

name: 'my plugin'
source:
    basedirectory: 'lib/'
    commandmodule:
        name: 'MyPlugin.Commands'
        type: MODULE_AND_CLASS_HAS_SAME_NAME
        man:
            directory: 'doc/man/source/'
            prefix: 'myplugin'
    toolscommandmodule:
       name: 'MyPlugin.Tools.Commands'
       type: SEPARATED_MODULES

3.2. Description of the fields used in configuration file

- name: the name of the plugin
- author: the author of the plugin
- email: the email address of the author
- source: this field describes how to integrat the plugin into DWA.
- source/basedierectory: the directory that contains the python code

- source/commandmodule: describes the location of the commands. These
    are the 'core command set of the DWA', which means these are easy
    to access and contains the most common commands. See
    toolscommandmodule below for the other type of commands.
- source/commandmodule/name: the name of the command module.
    It's a valid Python module name. In the previous example the location is
    in directory <root-directory-of-plugin>/lib/MyPlugin/Commands
- source/commandmodule/type: the type of the module, which indicates
    how to figure out the actual commands. It has two values:
    - MODULE_AND_CLASS_HAS_SAME_NAME: for instance, the command is
       'localtime', its command class is 'LocaltimeCommand'.
        Thus, the module that contains it is 'LocaltimeCommand',
        or, as an absolute name the module is
        'MyPlugin.Commands.LocaltimeCommand'. The constant says exactly
        this: the command class and module have same name, in this case
        both of them are named as 'LocaltimeCommand'.
    - MODULE_NAME_WITH_COMMAND_SUFFIX_IS_THE_COMMAND_CLASS_NAME:
        It's basically the same as Module_AND_CLASS_HAS_SAME_NAME, except
        the module suffix. Thus, for instance the 'localtime' command's
        class name is 'LocaltimeCommand', but it's in module 'Localtime',
        or as an absolute name, 'MyPlugin1.Commands.Localtime' module,
        without the 'Command' suffix.

        This is what the constant says: append 'Command' suffix to the
        module name, in this case to 'Localtime', to get the command class
        name, 'LocaltimeCommand'.
    - SEPARATED_MODULES: each command is in a separate module,
        which contains all information, including man pages.
        See 'doc/standalone-command-modules.txt' for details. Shortly,
        this means that the module uses the core features of the DWA,
        but the whole implementation and the manual page sit in
        a separate directory, which is treated as an individual module,
        because it has an __init__.py, etc.

- source/commandmodule/man: man-related settings for that command module
- source/comandmodule/man/directory: the name of the directory that contains
    the sources of the commands' man pages in docbook format (xml files).
    The directory is a subdirectory of the plugin's root directory.
- source/commandmodule/man/prefix: the prefix string of each man pages.
    For instance in case of DWA that's 'dwa', and the core commands' man
    page sources are named as '<DWA-ROOT>/doc/man/source/dwa-<command>.xml'

- source/toolscommandmodule: it's similar to the normal commandmodule,
    but this is the location of many smaller of larger commands, or, better
    named, tools, using for daily work, but these are not so widely used
    as the others - specified in source/commandmoudle.

    Consider the following scenario: the company sells an appliance,
    hardware an software. The logs or other texts such as web pages
    contain debugging information with the file names on the installed
    appliance. These file names are absolute file paths, but
    on the developer's machine these file paths differ. A command can
    interpret the appliance's file paths transparently as they would
    be valid for the local machine and the command starts an editor.


 4. Installing a plugin
 ----------------------

 Assuming that all above are done, for the current plugin the commands are
 written, <plugin-root>/etc/plugin.yml is filled, it's time to install
 our plugin. Basically it means a symlinking and an update.

 First, check the name in plugin.yml configuration file, what it is. Assuming
 it's 'myplugin1' for simplicity, thus the plugin.yml have the following line:

 name: myplugin1

 Next step is let DWA know our new plugin. That means that when DWA looks for
 installed plugins, it will find our plugin. DWA checks the following
 directory for plugins: <dwa-root>/etc/plugins/activated/.

 The directory contains configuration files for several plugins, this is why
 the name of the plugin - myplugin1 - is important during this step.
 The configuration file should be symlinked into this directory named as
 myplugin1.yml:

   ln -s <plugin-root>/etc/plugin.yml\
           <dwa-root>/etc/plugins/activated/myplugin1.txt

 At next update DWA will find the plugin. Perhaps it's ok, but there is
 a faster way: explicitly update plugin information:

   dwa selfupdate --plugins
